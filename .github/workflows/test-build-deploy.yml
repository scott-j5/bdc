# This is a basic workflow to help you get started with Actions

name: Test, Build and Deploy

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_DEBUG: '0'
  DJANGO_ALLOWED_HOSTS: ''
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  EMAIL_USER: ''
  EMAIL_PASSWORD: ''
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:    
  # Job to deploy python files to server
  deploy_to_server:
    # Dependant on success of test & build_and_deploy_static

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Python dependancies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # Be Careful automatically applying migrations to prod databases.
      - name: Make migrations
        run: |
          python manage.py makemigrations --noinput
          python manage.py migrate --noinput
        
      # Retreive private key from secrets and save as file deployment.key
      - name: Create identity file
        env:
          DEPLOYMENT_SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          DEPLOYMENT_PUB_KEY_FINGERPRINT: ${{ secrets.DEPLOYMENT_PUB_KEY_FINGERPRINT }}
        run: |
          mkdir ~/.ssh
          echo "$DEPLOYMENT_PUB_KEY_FINGERPRINT" | base64 --decode >> ~/.ssh/known_hosts
          echo "$DEPLOYMENT_SSH_KEY" | base64 --decode  > deployment.key
          chmod 400 deployment.key
      
      # Run update scripts on remote server
      - name: Update Application on production server
        run: |
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} touch ~/heyyyyy
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} if ! git ls-remote origin --quiet; then git -C /srv/bdc-venv/src remote add origin git@github.com-bdc:scott-j5/bdc.git; fi
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C /srv/bdc-venv/src fetch --all
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C /srv/bdc-venv/src reset --hard "${GITHUB_SHA}"
        # ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C /srv/bdc-venv/src clone git@github.com-bdc:scott-j5/bdc.git .
        # ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C /srv/bdc-venv/src checkout "${GITHUB_SHA}"
        # set perms
        # ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} sudo /home/ubuntu/thumbsup/admin/update.bash

        